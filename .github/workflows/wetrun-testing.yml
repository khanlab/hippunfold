name: Hippunfold PR Wet-Run (Ephemeral Runner)

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  actions: write   # needed to manage runners

env:
  OS_AUTH_TYPE:                      "v3applicationcredential"
  OS_AUTH_URL:                       "https://arbutus.cloud.computecanada.ca:5000/v3"
  OS_USERNAME:                       "djay"
  OS_USER_DOMAIN_NAME:               "CCDB"
  OS_APPLICATION_CREDENTIAL_ID:      ${{ secrets.OS_APPLICATION_CREDENTIAL_ID }}
  OS_APPLICATION_CREDENTIAL_SECRET: "${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}"


jobs:
  launch-runner:
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      FULL_REPO: ${{ github.repository }}
    outputs:
      vm_id: ${{ steps.launch.outputs.vm_id }}

    steps:
    - name: Install OpenStack CLI & tools
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-openstackclient jq gettext-base

    - name: Checkout workflow files
      uses: actions/checkout@v4

    - name: Get runner PAT
      id: pat
      run: |
        echo "::set-output name=pat::${{ secrets.RUNNER_PAT }}"

    - name: Get registration token
      id: token
      run: |
        token=$(curl -sS -X POST \
          -H "Authorization: token ${{ steps.pat.outputs.pat }}" \
          https://api.github.com/repos/${{ env.FULL_REPO }}/actions/runners/registration-token \
          | jq -r .token)
        if [ -z "$token" ] || [ "$token" == "null" ]; then
          echo "Failed to get runner registration token" >&2
          exit 1
        fi
        echo "::set-output name=token::$token"

    - name: Generate cloud-init
      run: |
        export PR_NUMBER=${{ env.PR_NUMBER }}
        export GITHUB_RUNNER_TOKEN=${{ steps.token.outputs.token }}
        export GITHUB_REPO_OWNER=${{ env.FULL_REPO%%/* }}
        export GITHUB_REPO_NAME=${{ env.FULL_REPO##*/ }}
        envsubst < cloud-init-runner.yml > cloud-init.generated.yml

    - name: Launch VM and register runner
      id: launch
      run: |
        openstack server create \
          --image "Ubuntu-22.04.4-Jammy-x64-2024-06" \
          --flavor c16-120gb-576 \
          --network def-akhanf-dev-network \
          --user-data cloud-init.generated.yml \
          hippunfold-pr-${PR_NUMBER}
        VM_ID=$(openstack server list --name hippunfold-pr-${PR_NUMBER} -f value -c ID)
        echo "::set-output name=vm_id::$VM_ID"

    - name: Wait for runner registration
      run: |
        echo "Waiting for runner runner-${{ env.PR_NUMBER }} to register..."
        for i in {1..30}; do
          runners=$(curl -sS -H "Authorization: token ${{ steps.pat.outputs.pat }}" \
            https://api.github.com/repos/${{ env.FULL_REPO }}/actions/runners \
            | jq -r '.runners // [] | .[].name')
          if echo "$runners" | grep -q "runner-${{ env.PR_NUMBER }}"; then
            echo "Runner registered."
            exit 0
          fi
          sleep 10
        done
        echo "Runner did not register in time." >&2
        exit 1

  run-wet-run:
    if: github.event_name == 'pull_request'
    needs: launch-runner
    runs-on: [self-hosted, ephemeral, wet-run]
    timeout-minutes: 60

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Fetch PR & run Hippunfold wet run
      run: |
        PR=${{ github.event.pull_request.number }}
        git fetch origin pull/${PR}/head:pr-${PR}
        git checkout pr-${PR}
        ./hippunfold/run.py ../data/lowresMRI derivatives/ participant \
          --participant-label 01 --modality T1w --cores all

  cleanup:
    needs: [launch-runner, run-wet-run]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Delete VM
      run: |
        openstack server delete ${{ needs.launch-runner.outputs.vm_id }} || true
