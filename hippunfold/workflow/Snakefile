#---- snakebids boilerplate

import snakebids
from snakebids import bids

configfile: 'config/snakebids.yml'

#get list of inputs to limit to (T1w + modalities)
limit_to_list = set()
limit_to_list.add('T1w') #always need T1w

for modality in config['modality']:
    if modality[:3] == 'seg': #if modality is segT2w, then add seg and T2w
        limit_to_list.add('seg')
        limit_to_list.add(modality[3:])
    elif modality == '1mmT1w': 
        break #1mmT1w is just for specifying cnn model, so don't add to 
                # list of bids inputs
    else:
        limit_to_list.add(modality)


#writes inputs_config.yml and updates config dict
snakebids.generate_inputs_config(config,limit_to=list(limit_to_list))

#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(config)

#----
wildcard_constraints:
    desc='[a-zA-Z0-9]+',
    space='[a-zA-Z0-9]+',
    hemi='[a-zA-Z0-9]+',
    surfname='[a-zA-Z0-9]+',
    modality='[a-zA-Z0-9]+',



       
def get_modality_key(modality):
    if modality[:3] == 'seg': #if modality is segT1w, then seg is used as the pybids index
        mod_index = 'seg'
    elif modality == '1mmT1w':
        mod_index = 'T1w'
    else:
        mod_index = modality
    return mod_index

#this function gets the list of final outputs (L+R combined segs)
def get_final_segs():
    subfields = []
    for modality in config['modality']:
        mod_index = get_modality_key(modality)
        subfields = subfields + \
            expand(
                bids(root='results',
                    datatype=f'seg_{modality}',
                    suffix='dseg.nii.gz',
                    desc='subfields',
                    space='T1w',
                    **config['subj_wildcards']),
                subject=config['input_lists'][mod_index]['subject'],
                session=config['sessions']
            )

    return subfields
                       

#this function gets the list of final surf spec files
def get_final_specs():
    specs = []
    for modality in config['modality']:
        mod_index = get_modality_key(modality)
        specs = specs + \
            expand(bids(root='work',datatype='surf_{modality}',suffix='hippunfold.spec', **config['subj_wildcards']),
                modality=modality,
                subject=config['input_lists'][mod_index]['subject'],
                session=config['sessions'])

    return specs
          


rule all:
    input: 
        segs = get_final_segs(),
        specs = get_final_specs(),
        coords = expand(bids(root='work',datatype='seg_{modality}',dir='{dir}',suffix='coords.nii.gz', space='cropT1w',hemi='{hemi}', **config['subj_wildcards']),
            dir=['AP','PD','IO'],hemi=['L','R'],modality=config['modality'],subject=config['subjects'],session=config['sessions']),
        subfields = expand(bids(root='work',datatype='seg_{modality}',desc='subfields',from_='{volsurf}',suffix='dseg.nii.gz', space='cropT1w',hemi='{hemi}', **config['subj_wildcards']),
            hemi=['L','R'],volsurf=['volume','surface'],modality=config['modality'],subject=config['subjects'],session=config['sessions']),
        subfieldswithtissue = expand(bids(root='work',datatype='seg_{modality}',desc='subfieldswithtissue',from_='volume',suffix='dseg.nii.gz', space='cropT1w',hemi='{hemi}', **config['subj_wildcards']),
            hemi=['L','R'],modality=config['modality'],subject=config['subjects'],session=config['sessions'])


include: 'rules/common.smk'
include: 'rules/preproc_t1.smk'

if 'segT1w' in config['modality'] or 'segT2w' in config['modality']:
    include: 'rules/preproc_seg.smk'

if 'segT2w' in config['modality'] or 'T2w' in config['modality']:
    include: 'rules/preproc_t2.smk'

if 'b500' in config['modality'] or 'b1000' in config['modality']:
    include: 'rules/preproc_dwi.smk'

include: 'rules/autotop.smk'
include: 'rules/gifti.smk'

