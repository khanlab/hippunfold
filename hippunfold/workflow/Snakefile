# ---- snakebids boilerplate

import snakebids
from snakebids import bids, set_bids_spec
from tempfile import mkdtemp


configfile: "config/snakebids.yml"


set_bids_spec("v0_0_0")

# consider moving this logic to another smk file to clean-up

limit_to_list = set()
ref_spaces = []
crop_ref_spaces = []
template_modality = False


# set the lists used for output spaces
ref_spaces.append(config["modality"])
crop_ref_spaces.append("crop"+config["modality"])
if (
    config["modality"] == "dsegtissue"
    or "corobl" in config["output_spaces"]
):
    ref_spaces.append("corobl")


if config["analysis_level"] == "group_create_atlas":
    limit_to_list.add("dsegsubfields")

limit_to_list.add(config["modality"])


inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    derivatives=config["derivatives"],
    participant_label=config["participant_label"],
    exclude_participant_label=config["exclude_participant_label"],
    limit_to=list(limit_to_list),
)


# this adds constraints to the bids naming
wildcard_constraints:
    **snakebids.get_wildcard_constraints(config["pybids_inputs"]),


# ----
wildcard_constraints:
    desc="[a-zA-Z0-9]+",
    space="[a-zA-Z0-9]+",
    hemi="[a-zA-Z0-9]+",
    surfname="[a-zA-Z0-9]+",
    modality="[a-zA-Z0-9]+",
    density="[a-zA-Z0-9]+",
    atlas="[a-zA-Z0-9]+",
    label="[a-zA-Z0-9]+",
    template="[a-zA-Z0-9]+",


root = os.path.expandvars(config["root"])


include: "rules/common.smk"

# include rules only as they are needed..
if config["modality"] == "dsegtissue":
    include: "rules/preproc_dsegtissue.smk"
else:
    include: "rules/preproc_inputs.smk"
    include: "rules/nnunet.smk"
include: "rules/coords.smk"
include: "rules/native_isosurf.smk"
include: "rules/inner_outer_surf.smk"
include: "rules/native_metrics.smk"
include: "rules/native_unfold.smk"
include: "rules/unfold_reg.smk"
include: "rules/native_resampling.smk"
include: "rules/cifti.smk"
include: "rules/subfields.smk"
include: "rules/resample_final_to_crop.smk"
include: "rules/qc.smk"


rule all:
    input:
        get_final_output(),


if config["analysis_level"] == "group_create_atlas":

    include: "rules/atlas_gen.smk"

    config["atlas"] = config["new_atlas_name"]


rule all_create_atlas:
    input:
        get_create_atlas_output(),


rule all_group_tsv:
    input:
        tsv=expand(
            bids(
                root=root,
                prefix="group",
                desc="subfields",
                space="{space}",
                atlas="{atlas}",
                from_="{modality}",
                suffix="volumes.tsv",
            ),
            modality=config["modality"],
            atlas=config["atlas"],
            space=crop_ref_spaces,
        ),
