# ---- snakebids boilerplate

import snakebids
from snakebids import bids


configfile: "config/snakebids.yml"


# consider moving this logic to another smk file to clean-up

limit_to_list = set()
ref_spaces = []
crop_ref_spaces = []
template_modality = False


# set the lists used for output spaces
if (
    config["modality"] == "T1w"
    or config["modality"] == "segT1w"
    or "T1w" in config["output_spaces"]
):
    ref_spaces.append("T1w")
    crop_ref_spaces.append("cropT1w")
    limit_to_list.add("T1w")
if (
    (config["modality"] == "T2w" or config["modality"] == "segT2w")
    and "native" in config["output_spaces"]
) or "T2w" in config["output_spaces"]:
    ref_spaces.append("T2w")
    crop_ref_spaces.append("cropT2w")
    limit_to_list.add("T2w")
if (
    config["modality"] == "hippb500"
    or config["modality"] == "cropseg"
    or "corobl" in config["output_spaces"]
):
    ref_spaces.append("corobl")
    crop_ref_spaces.append("corobl")

# add required inputs for myelin mapping
if config["generate_myelin_map"]:
    limit_to_list.add("T1w")
    limit_to_list.add("T2w")


# set the modality to use for template registration
if "T2w" in config["modality"]:
    if config["t1_reg_template"]:
        limit_to_list.add("T1w")
        template_modality = "T1w"
    else:
        template_modality = "T2w"

elif "T1w" in config["modality"]:
    template_modality = "T1w"


# only generate hipp surface if skipping template injection
#   i.e. drop dentate
if config["skip_inject_template_labels"]:  # TODO do we need this?
    config["autotop_labels"] = ["hipp"]


# add seg (if chosen) and the modality to the inputs
if config["modality"][:3] == "seg":  # if modality is segT2w, then add seg
    limit_to_list.add("seg")
    limit_to_list.add(config["modality"][3:])
else:
    limit_to_list.add(config["modality"])

# if atlas doesn't contain alignment features
if not config["atlas"] == ["multihist7"]:
    config["no_unfolded_reg"] = True

# writes inputs_config.yml and updates config dict
config.update(
    snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config["pybids_inputs"],
        derivatives=config["derivatives"],
        participant_label=config["participant_label"],
        exclude_participant_label=config["exclude_participant_label"],
        limit_to=list(limit_to_list),
        use_bids_inputs=False,
    )
)


# this adds constraints to the bids naming
wildcard_constraints:
    **snakebids.get_wildcard_constraints(config["pybids_inputs"]),


# ----
wildcard_constraints:
    desc="[a-zA-Z0-9]+",
    space="[a-zA-Z0-9]+",
    hemi="[a-zA-Z0-9]+",
    surfname="[a-zA-Z0-9]+",
    modality="[a-zA-Z0-9]+",
    density="[a-zA-Z0-9]+",
    atlas="[a-zA-Z0-9]+",
    autotop="[a-zA-Z0-9]+",


root = os.path.join(config["root"], "hippunfold")
work = os.path.join(config["root"], "work")


include: "rules/common.smk"
include: "rules/download.smk"
include: "rules/preproc_t1.smk"


# include rules only as they are needed..
if config["modality"] == "segT1w" or config["modality"] == "segT2w":

    include: "rules/preproc_seg.smk"

elif config["modality"] == "cropseg":

    include: "rules/preproc_cropseg.smk"

else:

    include: "rules/nnunet.smk"


if "T2w" in limit_to_list or config["generate_myelin_map"]:

    include: "rules/preproc_t2.smk"


if config["modality"] == "hippb500":

    include: "rules/preproc_hippb500.smk"


include: "rules/autotop.smk"


include: "rules/warps.smk"


include: "rules/gifti.smk"


include: "rules/subfields.smk"


include: "rules/resample_final_to_crop_native.smk"


include: "rules/qc.smk"


include: "rules/myelin_map.smk"


if config["use_template_seg"]:
    if (
        "dseg" in config["template_files"][config["template"]]
        and "coords" in config["template_files"][config["template"]]
    ):

        include: "rules/templateseg.smk"

    else:
        print(
            "use_template_seg is not possible, template dseg or coords do not exist for the chosen template"
        )

        include: "rules/shape_inject.smk"

else:

    include: "rules/shape_inject.smk"


rule all:
    input:
        get_final_output(),


rule all_group_tsv:
    input:
        tsv=expand(
            bids(
                root=root,
                prefix="group",
                desc="subfields",
                space="{space}",
                atlas="{atlas}",
                from_="{modality}",
                suffix="volumes.tsv",
            ),
            modality=config["modality"],
            atlas=config["atlas"],
            space=crop_ref_spaces,
        ),
