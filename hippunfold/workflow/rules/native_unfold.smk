
rule get_boundary_vertices:
    input:
        surf_gii=bids(
            root=root,
            datatype="surf",
            suffix="midthickness.surf.gii",
            space="corobl",
            den="native",
            hemi="{hemi}",
            label="{label}",
            **inputs.subj_wildcards,
        ),
    output:
        label_gii=temp(
            bids(
                root=root,
                datatype="metric",
                suffix="boundary.label.gii",
                den="native",
                hemi="{hemi}",
                label="{label}",
                **inputs.subj_wildcards,
            )
        ),
    group:
        "subj"
    conda:
        conda_env("pyvista")
    log:
        bids_log(
            "get_boundary_verticies",
            **inputs.subj_wildcards,
            hemi="{hemi}",
            label="{label}",
        ),
    script:
        "../scripts/get_boundary_vertices.py"


rule map_src_sink_sdt_to_surf:
    """ Maps the distance to src/sink mask """
    input:
        surf_gii=bids(
            root=root,
            datatype="surf",
            suffix="midthickness.surf.gii",
            space="corobl",
            den="native",
            hemi="{hemi}",
            label="{label}",
            **inputs.subj_wildcards,
        ),
        sdt=bids(
            root=root,
            datatype="coords",
            suffix="sdt.nii.gz",
            space="corobl",
            dir="{dir}",
            desc="{srcsink}",
            hemi="{hemi}",
            label="{label}",
            **inputs.subj_wildcards,
        ),
    output:
        sdt=temp(
            bids(
                root=root,
                datatype="metric",
                suffix="sdt.shape.gii",
                den="native",
                hemi="{hemi}",
                dir="{dir}",
                desc="{srcsink}",
                label="{label}",
                **inputs.subj_wildcards,
            )
        ),
    conda:
        conda_env("workbench")
    group:
        "subj"
    shell:
        "wb_command -volume-to-surface-mapping {input.sdt} {input.surf_gii} {output.sdt} -trilinear"


rule postproc_boundary_vertices:
    """ ensures non-overlapping and full labelling of AP/PD edges """
    input:
        ap_src=bids(
            root=root,
            datatype="metric",
            suffix="sdt.shape.gii",
            den="native",
            hemi="{hemi}",
            dir="AP",
            desc="src",
            label="{label}",
            **inputs.subj_wildcards,
        ),
        ap_sink=bids(
            root=root,
            datatype="metric",
            suffix="sdt.shape.gii",
            den="native",
            hemi="{hemi}",
            dir="AP",
            desc="sink",
            label="{label}",
            **inputs.subj_wildcards,
        ),
        pd_src=bids(
            root=root,
            datatype="metric",
            suffix="sdt.shape.gii",
            den="native",
            hemi="{hemi}",
            dir="PD",
            desc="src",
            label="{label}",
            **inputs.subj_wildcards,
        ),
        pd_sink=bids(
            root=root,
            datatype="metric",
            suffix="sdt.shape.gii",
            den="native",
            hemi="{hemi}",
            dir="PD",
            desc="sink",
            label="{label}",
            **inputs.subj_wildcards,
        ),
        edges=bids(
            root=root,
            datatype="metric",
            suffix="boundary.label.gii",
            den="native",
            hemi="{hemi}",
            label="{label}",
            **inputs.subj_wildcards,
        ),
    params:
        min_terminal_vertices=5,  # min number of vertices per src/sink
        max_iterations=100,
        shifting_epsilon=0.1,  #could be proportional to voxel spacing
    output:
        ap=temp(
            bids(
                root=root,
                datatype="metric",
                suffix="mask.label.gii",
                den="native",
                hemi="{hemi}",
                dir="AP",
                desc="srcsink",
                label="{label}",
                **inputs.subj_wildcards,
            )
        ),
        pd=temp(
            bids(
                root=root,
                datatype="metric",
                suffix="mask.label.gii",
                den="native",
                hemi="{hemi}",
                dir="PD",
                desc="srcsink",
                label="{label}",
                **inputs.subj_wildcards,
            )
        ),
    log:
        bids_log(
            "postproc_boundary_verticies",
            **inputs.subj_wildcards,
            hemi="{hemi}",
            label="{label}",
        ),
    conda:
        conda_env("pyvista")
    group:
        "subj"
    script:
        "../scripts/postproc_boundary_vertices.py"


rule laplace_beltrami:
    input:
        surf_gii=bids(
            root=root,
            datatype="surf",
            suffix="midthickness.surf.gii",
            space="corobl",
            den="native",
            hemi="{hemi}",
            label="{label}",
            **inputs.subj_wildcards,
        ),
        src_sink_mask=bids(
            root=root,
            datatype="metric",
            suffix="mask.label.gii",
            den="native",
            hemi="{hemi}",
            dir="{dir}",
            desc="srcsink",
            label="{label}",
            **inputs.subj_wildcards,
        ),
    output:
        coords=bids(
            root=root,
            datatype="metric",
            dir="{dir}",
            suffix="coords.shape.gii",
            desc="laplace",
            den="native",
            hemi="{hemi}",
            label="{label}",
            **inputs.subj_wildcards,
        ),
    group:
        "subj"
    threads: 1
    resources:
        mem_mb=36000,  #requires this much memory for the large ex vivo scans, depends on decimation too
    conda:
        conda_env("pyvista")
    log:
        bids_log(
            "laplace_beltrami",
            **inputs.subj_wildcards,
            hemi="{hemi}",
            label="{label}",
            dir="{dir}",
        ),
    script:
        "../scripts/laplace_beltrami.py"


def get_unfold_z_level(wildcards):
    extent = float(config["unfold_vol_ref"][wildcards.label]["extent"][-1])
    return config["surf_thresholds"][wildcards.surfname] * extent


rule warp_native_mesh_to_unfold:
    input:
        surf_gii=bids(
            root=root,
            datatype="surf",
            suffix="midthickness.surf.gii",
            space="corobl",
            den="native",
            hemi="{hemi}",
            label="{label}",
            **inputs.subj_wildcards,
        ),
        coords_AP=bids(
            root=root,
            datatype="metric",
            dir="AP",
            label="{label}",
            suffix="coords.shape.gii",
            desc="laplace",
            den="native",
            hemi="{hemi}",
            **inputs.subj_wildcards,
        ),
        coords_PD=bids(
            root=root,
            datatype="metric",
            dir="PD",
            label="{label}",
            suffix="coords.shape.gii",
            desc="laplace",
            den="native",
            hemi="{hemi}",
            **inputs.subj_wildcards,
        ),
    params:
        vertspace=lambda wildcards: config["unfold_vol_ref"][wildcards.label],
        z_level=get_unfold_z_level,
    output:
        surf_gii=temp(
            bids(
                root=root,
                datatype="surf",
                suffix="{surfname,midthickness}.surf.gii",
                desc="nostruct",
                space="unfold",
                den="native",
                hemi="{hemi}",
                label="{label}",
                **inputs.subj_wildcards,
            )
        ),
    conda:
        conda_env("pyvista")
    group:
        "subj"
    script:
        "../scripts/rewrite_vertices_to_flat.py"


rule space_unfold_vertices:
    """ this irons out the surface to result in more even
        vertex spacing. the resulting shape will be more
        individual (e.g. the surface area in unfolded space
        would be similar to native) """
    input:
        surf_gii=bids(
            root=root,
            datatype="surf",
            suffix="midthickness.surf.gii",
            desc="nostruct",
            space="unfold",
            den="native",
            hemi="{hemi}",
            label="{label}",
            **inputs.subj_wildcards,
        ),
        native_gii=bids(
            root=root,
            datatype="surf",
            suffix="midthickness.surf.gii",
            space="corobl",
            den="native",
            hemi="{hemi}",
            label="{label}",
            **inputs.subj_wildcards,
        ),
    params:
        step_size=0.1,
        max_iterations=10000,
    output:
        surf_gii=temp(
            bids(
                root=root,
                datatype="surf",
                suffix="midthickness.surf.gii",
                desc="nostruct",
                den="native",
                space="unfoldspringmodel",
                hemi="{hemi}",
                label="{label}",
                **inputs.subj_wildcards,
            )
        ),
    conda:
        conda_env("pyvista")
    group:
        "subj"
    log:
        bids_log(
            "space_unfold_vertices",
            **inputs.subj_wildcards,
            hemi="{hemi}",
            label="{label}",
        ),
    script:
        "../scripts/space_unfold_vertices.py"


rule unfold_surface_smoothing:
    input:
        surf_gii=bids(
            root=root,
            datatype="surf",
            suffix="midthickness.surf.gii",
            desc="nostruct",
            space="unfoldspringmodel",
            den="native",
            hemi="{hemi}",
            label="{label}",
            **inputs.subj_wildcards,
        ),
    params:
        strength=1,
        iterations=5,
    output:
        surf_gii=temp(
            bids(
                root=root,
                datatype="surf",
                suffix="midthickness.surf.gii",
                space="unfoldspringmodelsmooth",
                den="native",
                hemi="{hemi}",
                label="{label}",
                **inputs.subj_wildcards,
            )
        ),
    conda:
        conda_env("workbench")
    group:
        "subj"
    shell:
        "wb_command -surface-smoothing {input} {params} {output}"


rule set_surface_z_level:
    input:
        surf_gii=bids(
            root=root,
            datatype="surf",
            suffix="midthickness.surf.gii",
            desc="nostruct",
            space="unfold",
            den="native",
            hemi="{hemi}",
            label="{label}",
            **inputs.subj_wildcards,
        ),
    params:
        z_level=get_unfold_z_level,
    output:
        surf_gii=temp(
            bids(
                root=root,
                datatype="surf",
                suffix="{surfname,inner|outer}.surf.gii",
                desc="nostruct",
                space="unfold",
                den="native",
                hemi="{hemi}",
                label="{label}",
                **inputs.subj_wildcards,
            )
        ),
    group:
        "subj"
    conda:
        conda_env("pyvista")
    script:
        "../scripts/set_surface_z_level.py"
